name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  GO_VERSION: '1.24'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/recipe-manager

jobs:
  lint-and-format:
    name: Lint & Format
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run go vet
        run: go vet ./...

      - name: Check code formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Code is not formatted. Please run 'go fmt ./...'"
            gofmt -d .
            exit 1
          fi

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out results.sarif ./...'

      - name: Upload SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

      - name: Run Nancy vulnerability scan
        run: |
          go install github.com/sonatypecommunity/nancy@latest
          go list -json -deps ./... | nancy sleuth

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.24']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Install dependencies
        run: go mod download

      - name: Run unit tests
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./internal/...

      - name: Test recipe manager specific operations
        run: |
          echo "Testing recipe management logic..."
          go test -v -race ./internal/recipe-manager/domain/
          echo "Testing HTTP API handlers..."
          go test -v -race ./internal/recipe-manager/infrastructure/http/

      - name: Test observability components
        run: |
          echo "Testing logging with tracing integration..."
          go test -v -race ./internal/infrastructure/logging/
          echo "Testing distributed tracing..."
          go test -v -race ./internal/infrastructure/tracing/

      - name: Generate coverage report
        if: matrix.go-version == env.GO_VERSION
        run: |
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        if: matrix.go-version == env.GO_VERSION
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: recipe-manager-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage artifacts
        if: matrix.go-version == env.GO_VERSION
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      jaeger:
        image: jaegertracing/all-in-one:latest
        ports:
          - 16686:16686
          - 14268:14268
          - 4317:4317
          - 4318:4318
        env:
          COLLECTOR_OTLP_ENABLED: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Install dependencies
        run: go mod download

      - name: Wait for services
        run: |
          echo "Waiting for MySQL..."
          while ! mysqladmin ping -h"127.0.0.1" -P3306 -uroot -ptestpassword --silent; do
            sleep 1
          done
          echo "Waiting for Jaeger..."
          curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:16686/

      - name: Run integration tests
        run: go test -v -race ./test/...
        env:
          TESTCONTAINERS_RYUK_DISABLED: true
          DOCKER_HOST: unix:///var/run/docker.sock
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: testpassword
          DB_NAME: testdb
          JAEGER_ENDPOINT: http://localhost:14268/api/traces
          OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4318

      - name: Test API endpoints with observability
        run: |
          echo "Starting recipe-manager service in background..."
          go run ./cmd/ &
          SERVICE_PID=$!
          
          echo "Waiting for service to start..."
          sleep 10
          
          echo "Testing API endpoints..."
          curl -f http://localhost:8080/health || echo "Health check endpoint test"
          curl -f -X GET http://localhost:8080/recipes || echo "Recipes endpoint test"
          
          echo "Testing with correlation ID..."
          curl -H "X-Correlation-ID: test-correlation-api-123" -f http://localhost:8080/health || echo "Correlation ID test"
          
          echo "Stopping service..."
          kill $SERVICE_PID || true

      - name: Test observability stack
        run: |
          echo "Testing complete observability stack..."
          go test -v ./test/integration/logging_integration_test.go ./test/integration/helper.go

  build:
    name: Build & Container
    runs-on: ubuntu-latest
    needs: [security, unit-tests]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build recipe-manager binary
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
            -ldflags="-s -w -X main.version=${{ github.sha }}" \
            -o bin/recipe-manager ./cmd/

      - name: Test recipe-manager binary
        run: |
          ./bin/recipe-manager --version || echo "Recipe manager binary built successfully"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

  api-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Test REST API endpoints
        run: |
          echo "Testing recipe CRUD operations..."
          go test -v -run TestAPIIntegration ./test/...
          
          echo "Testing recipe search functionality..."
          go test -v -run TestRecipeSearch ./test/...

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run performance benchmarks
        run: |
          echo "Running HTTP handler benchmarks..."
          go test -bench=BenchmarkHTTPHandlers -benchmem -count=3 ./internal/... | tee benchmark.txt
          
          echo "Running database operation benchmarks..."
          go test -bench=BenchmarkDatabase -benchmem -count=3 ./internal/... | tee -a benchmark.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: recipe-manager-benchmark-results
          path: benchmark.txt

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [lint-and-format, security, unit-tests, integration-tests, build]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint-and-format.result }}" != "success" ]]; then
            echo "Lint and format job failed"
            exit 1
          fi
          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "Security job failed"
            exit 1
          fi
          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "Unit tests job failed"
            exit 1
          fi
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "Integration tests job failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "Build job failed"
            exit 1
          fi
          echo "All jobs completed successfully!"
